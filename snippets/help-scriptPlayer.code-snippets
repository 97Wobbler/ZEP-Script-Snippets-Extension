{
	// ScriptPlayer - Field
	"HELP: player.id": {
		"prefix": "helpplayer.id",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The 6-digit hash ID value of the player.",
			" * @readonly",
			" * @type {string}",
			" */",
			"",
			"// Example usage",
			"player.id"
		]
	},
	"HELP: player.name": {
		"prefix": "helpplayer.name",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The nickname of the player.",
			" * @type {string}",
			" */",
			"",
			"// Example usage",
			"player.name = 'New Name';",
			"player.sendUpdated();"
		]
	},
	"HELP: player.title": {
		"prefix": "helpplayer.title",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The text that displays above the player's nickname.",
			" * @type {string}",
			" */",
			"",
			"// Example usage",
			"player.title = 'New Title';",
			"player.sendUpdated();"
		]
	},
	"HELP: player.role": {
		"prefix": "helpplayer.role",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The numeric value of the player's permission role.",
			" * -1: GUEST / 0: MEMBER / 1000: EDITOR / 2000: STAFF / 3000: ADMIN / 3001: OWNER",
			" * @readonly",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.role"
		]
	},
	"HELP: player.tileX": {
		"prefix": "helpplayer.tileX",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The x coordinate of the player's position.",
			" * @readonly",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.tileX"
		]
	},
	"HELP: player.tileY": {
		"prefix": "helpplayer.tileY",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The y coordinate of the player's position.",
			" * @readonly",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.tileY"
		]
	},
	"HELP: player.dir": {
		"prefix": "helpplayer.dir",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The direction that the player’s avatar is looking.",
			" * 1: WEST / 2: NORTH / 3: EAST / 4: SOUTH / 5: NORTH_WEST / 6: SOUTH_WEST / 7: NORTH_EAST / 8: SOUTH_EAST",
			" * @readonly",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.dir"
		]
	},
	"HELP: player.moveSpeed": {
		"prefix": "helpplayer.moveSpeed",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The movement speed value of the player. The default value is '90'. Set to '0' to prevent movement.",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.moveSpeed = 120;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.sprite": {
		"prefix": "helpplayer.sprite",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The sprite image of the player’s avatar.",
			" * @type {?ScriptDynamicResource} - A return value from the method 'App.loadSpritesheet'. Use 'null' to set the default avatar.",
			" */",
			"",
			"// Example usage",
			"let newAvatarSprite = App.loadSpritesheet('sprites/mySpritesheet.png', 48, 64, {",
			"\tdown_idle: [0], down: [1, 2, 3, 4], down_jump: [28],",
			"\tleft_idle: [5], left: [6, 7, 8, 9], left_jump: [29],",
			"\tright_idle: [10], right: [11, 12, 13, 14], right_jump: [30],",
			"\tup_idle: [15], up: [16, 17, 18, 19], up_jump: [31],",
			"\tdance: [20, 21, 22, 23, 24, 25, 26, 27]",
			"}, 8);",
			"player.sprite = newAvatarSprite",
			"player.sendUpdated();"
		]
	},
	"HELP: player.tag": {
		"prefix": "helpplayer.tag",
		"body": [
			"/**",
			" * A field of ScriptPlayer where you can temporarily store custom attribute values for an online player.",
			" * Note: This value expires after the player leaves the 'map'.",
			" * @type {any}",
			" */",
			"",
			"// Example usage",
			"player.tag = { widget: null }",
			"player.sendUpdated();"
		]
	},
	"HELP: player.hidden": {
		"prefix": "helpplayer.hidden",
		"body": [
			"/**",
			" * A field of ScriptPlayer that determines whether to hide the player's avatar from others. The default value is false.",
			" * NOTE: It is still possible to connect video and audio when the player is hidden.",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.hidden = true;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.spotlight": {
		"prefix": "helpplayer.spotlight",
		"body": [
			"/**",
			" * A field of ScriptPlayer that determines whether the player's 'spotlight' is enabled or disabled.",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.spotlight = true;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.disableVideo": {
		"prefix": "helpplayer.disableVideo",
		"body": [
			"/**",
			" * A field of ScriptPlayer that indicates whether the player's video is deactivated or not.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.disableVideo"
		]
	},
	"HELP: player.disableAudio": {
		"prefix": "helpplayer.disableAudio",
		"body": [
			"/**",
			" * A field of ScriptPlayer that indicates whether the player's audio is deactivated or not.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.disableAudio"
		]
	},
	"HELP: player.attackType": {
		"prefix": "helpplayer.attackType",
		"body": [
			"/**",
			" * A field of ScriptPlayer that indicates the type of attack action. '0' is the default type, and '2' is for ranged attack type.",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.attackType = 2;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.attackParam1": {
		"prefix": "helpplayer.attackParam1",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The distance range attribute for the player's attack image. The default value is '1'.",
			" * NOTE: The attack’s possible distance range does not increase.",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.attackParam1 = 10;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.attackParam2": {
		"prefix": "helpplayer.attackParam2",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The available range for a ranged attack.",
			" * NOTE: This is only valid if attackType is set to '2', which is the ranged attack.",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.attackType = 2;",
			"player.attackParam2 = 5;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.attackSprite": {
		"prefix": "helpplayer.attackSprite",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The attack image of a player.",
			" * @type {?ScriptDynamicResource} - A return value from the method 'App.loadSpritesheet'. Use 'null' to set the default attack image.",
			" */",
			"",
			"// Example usage",
			"let newAttackSprite = App.loadSpritesheet('attackSprite.png', 32, 32, [0, 1, 2], 3)",
			"player.attackSprite = newAttackSprite;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.walletAddress": {
		"prefix": "helpplayer.walletAddress",
		"body": [
			"/**",
			" * A field of ScriptPlayer that stores the player's wallet address.",
			" * @readonly",
			" * @type {?string} - The wallet address, or null if the player has no wallet address.",
			" */",
			"",
			"// Example usage",
			"player.walletAddress"
		]
	},
	"HELP: player.storage": {
		"prefix": "helpplayer.storage",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The storage space for the player value within the 'space'.",
			" * NOTE: This is a string value, so use 'JSON.stringify' and 'JSON.parse' to save and load JSON data in 'player.storage'.",
			" * @type {string}",
			" */",
			"",
			"// Example usage",
			"let data = { property1: 'value1', property2: true, property3: 0 }",
			"player.storage = JSON.stringify(data);",
			"player.save();"
		]
	},
	"HELP: player.isMobile": {
		"prefix": "helpplayer.isMobile",
		"body": [
			"/**",
			" * A field of ScriptPlayer that indicates whether the player is connected via mobile.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.isMobile"
		]
	},
	"HELP: player.isMoving": {
		"prefix": "helpplayer.isMoving",
		"body": [
			"/**",
			" * A field of ScriptPlayer that indicates whether the player is moving.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.isMoving"
		]
	},
	"HELP: player.isJumping": {
		"prefix": "helpplayer.isJumping",
		"body": [
			"/**",
			" * A field of ScriptPlayer indicates whether the player is jumping.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.isJumping"
		]
	},
	"HELP: player.customData": {
		"prefix": "helpplayer.customData",
		"body": [
			"/**",
			" * A field of ScriptPlayer, the URL query string passed into the player.",
			" * NOTE: You can create a simple token-based function by providing your customers with a URL with encoded properties, and decoding it when the player enters.",
			" * @readonly",
			" * @type {string}",
			" */",
			"",
			"// Example usage",
			"player.customData"
		]
	},
	"HELP: player.displayRatio": {
		"prefix": "helpplayer.displayRatio",
		"body": [
			"/**",
			" * A field of ScriptPlayer that controls player's display zooming. The default value is '1'.",
			" * @type {number}",
			" */",
			"",
			"// Example usage",
			"player.displayRatio = 0.8;",
			"player.sendUpdated();"
		]
	},
	"HELP: player.titleColor": {
		"prefix": "helpplayer.titleColor",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The color of the player's title.",
			" * @type {(ColorType|uint)} - Can be an enum 'ColorType' value or hexadecimal color code.",
			" * WHITE, BLACK, RED, GREEN, BLUE, ORANGE, PURPLE, GRAY, YELLOW, MAGENTA, CYAN",
			" */",
			"",
			"// Example usage",
			"player.titleColor = ColorType.WHITE; // 0xFFFFFF",
			"player.sendUpdated();"
		]
	},
	"HELP: player.emailHash": {
		"prefix": "helpplayer.emailHash",
		"body": [
			"/**",
			" * A field of ScriptPlayer. The hash value of the player's email.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.emailHash"
		]
	},
	"HELP: player.isGuest": {
		"prefix": "helpplayer.isGuest",
		"body": [
			"/**",
			" * A field of ScriptPlayer, whether the player is not signed in.",
			" * @readonly",
			" * @type {boolean}",
			" */",
			"",
			"// Example usage",
			"player.isGuest"
		]
	},
	// ScriptPlayer - Methods / UI
	"HELP: player.showCenterLabel": {
		"prefix": "helpplayer.showCenterLabel",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to display text at a designated location to the player.",
			" * @param {string} text - The text to be displayed on the label.",
			" * @param {uint} [textColor=0xFFFFFF] - The color of the text to be displayed.",
			" * @param {uint} [bgColor=0x000000] - The color of the label where the message is displayed.",
			" * @param {number} [offset=0] - The offset value determines the position of the label. Larger values move the label closer to the bottom of the screen.",
			" * @param {number} [time=3000] - The duration that the label is displayed, in milliseconds.",
			" */",
			"",
			"// Example usage",
			"let text = 'myText';",
			"let textColor = 0xFFFFFF;",
			"let bgColor = 0x000000;",
			"let offset = 0;",
			"let time = 3000;",
			"player.showCenterLabel(text, textColor, bgColor, offset, time);"
		]
	},
	"HELP: player.showCustomLabel": {
		"prefix": "helpplayer.showCustomLabel",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to display text at a designated location to the player. Allows decorating the text using <span> tags.",
			" * @param {string} text - The text to be displayed on the label, with <span> tags allowed.",
			" * @param {uint} [textColor=0xFFFFFF] - The color of the text to be displayed.",
			" * @param {uint} [bgColor=0x000000] - The color of the label where the message is displayed.",
			" * @param {number} [offset=0] - The offset value determines the position of the label. Larger values move the label closer to the bottom of the screen.",
			" * @param {number} [width=100] - The width of the label, as a percentage of the screen width.",
			" * @param {number} [opacity=0.6] - The transparency of the label, as a value between 0 and 1.",
			" * @param {number} [time=3000] - The duration that the label is displayed, in milliseconds.",
			" */",
			"",
			"// Example usage",
			"let style ='font-weight: bold';",
			"let text = `<span style=\"${style}\">Bold text</span> and plain text.`;",
			"let textColor = 0xFFFFFF;",
			"let bgColor = 0x000000;",
			"let offset = 0;",
			"let width = 100;",
			"let opacity = 0.6;",
			"let time = 3000;",
			"player.showCustomLabel(text, textColor, bgColor, offset, width, opacity, time);"
		]
	},
	"HELP: player.showWidget": {
		"prefix": "helpplayer.showWidget",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to load an HTML file as a widget and display it at the specified align position to the player.",
			" * @param {string} filePath - The path of the HTML file to be loaded.",
			" * @param {string} align - The position where to display the widget.",
			" * 'popup', 'sidebar', 'top', 'topleft', 'topright', 'middle', 'middleleft', 'middleright', 'bottom', 'bottomleft', 'bottomright'",
			" * @param {number} appWidth - The width of the area to display the widget, in pixels.",
			" * @param {number} appHeight - he height of the area to display the widget, in pixels.",
			" * @returns {ScriptWidget}",
			" */",
			"",
			"// Example usage",
			"let filePath = 'widget/myWidget.html';",
			"let align = 'sidebar';",
			"let appWidth = 400;",
			"let appHeight = 300;",
			"player.tag.widget = player.showWidget(filePath, align, appWidth, appHeight);"
		]
	},
	"HELP: player.showWidgetResponsive": {
		"prefix": "helpplayer.showWidgetResponsive",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to load an HTML file as a widget and display it to the player, in the specific area defined by relative margin values.",
			" * NOTE: If the screen size becomes smaller than the widget area including the margins, the size of the widget decreases proportionally.",
			" * @param {string} filePath - The path of the HTML file to be loaded.",
			" * @param {number} marginTop - The top margin of the widget to display, in percentage.",
			" * @param {number} marginRight - The right margin of the widget to display, in percentage.",
			" * @param {number} marginBottom - The bottom margin of the widget to display, in percentage.",
			" * @param {number} marginLeft - The left margin of the widget to display, in percentage.",
			" * @returns {ScriptWidget}",
			" */",
			"",
			"// Example usage",
			"let filePath = 'widget/myWidget.html';",
			"let marginTop = 15;",
			"let marginRight = 15;",
			"let marginBottom = 15;",
			"let marginLeft = 15;",
			"player.tag.widget = player.showWidgetResponsive(filePath, marginTop, marginRight, marginBottom, marginLeft);"
		]
	},
	"HELP: player.showBuyAlert": {
		"prefix": "helpplayer.showBuyAlert",
		"body": [
			"/**",
			" * A method of ScriptPlayer that displays a purchase widget to the player. The callback function executes when a purchase is completed.",
			" * @param {string} itemName - The name of the item to be displayed in the purchase widget.",
			" * @param {number} price - The price of the item, in ZEM.",
			" * @param {boolean} [payToSpaceOwner=false] - A boolean flag indicating whether the revenue goes to the 'map' owner or the 'app' owner.",
			" */",
			"",
			"// Example usage",
			"player.showBuyAlert(itemName, price, function () {",
			"\t// do something...",
			"}, payToSpaceOwner);"
		]
	},
	"HELP: player.showYoutubeWidget": {
		"prefix": "helpplayer.showYoutubeWidget",
		"body": [
			"/**",
			" * A method of ScriptPlayer that displays a YouTube video in a widget at the specified alignment to the player.",
			" * @param {string} link - The URL of the YouTube video to display.",
			" * @param {string} align - The alignment position where the widget will be displayed.",
			" * 'popup', 'sidebar', 'top', 'topleft', 'topright', 'middle', 'middleleft', 'middleright', 'bottom', 'bottomleft', 'bottomright'",
			" * @param {number} appWidth - The width of the area to display the widget, in pixels",
			" * @param {number} appHeight - The height of the area to display the widget, in pixels",
			" * @returns {ScriptWidget}",
			" */",
			"",
			"// Example usage",
			"let link = 'https://www.youtube.com/watch?v=WMxGnU5j4Hw';",
			"let align = 'sidebar';",
			"let appWidth = 400;",
			"let appHeight = 300;",
			"player.tag.widget = player.showYoutubeWidget(link, align, appWidth, appHeight);"
		]
	},
	"HELP: player.openWebLink": {
		"prefix": "helpplayer.openWebLink",
		"body": [
			"/**",
			" * A method of ScriptPlayer that displays a web page in a widget or a new tab to the player.",
			" * @param {string} url - The URL of the web page to be displayed.",
			" * @param {boolean} [popup=false] - A boolean flag indicating whether to open web page in a popup modal.",
			" * @returns {ScriptWidget}",
			" */",
			"",
			"// Example usage",
			"let url = 'https://zep.us';",
			"let popup = true;",
			"player.tag.widget = player.openWebLink(url, popup);"
		]
	},
	"HELP: player.sendMessage": {
		"prefix": "helpplayer.sendMessage",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to send a private message to the player in the chat window.",
			" * @param {string} text - The text to display in the chat window.",
			" * @param {uint} [color=0xFFFFFF] - The color of the text to be displayed.",
			" */",
			"",
			"// Example usage",
			"let text = `Welcome, ${player.name}!`;",
			"let color = 0x80FF80;",
			"player.sendMessage(text, color);"
		]
	},
	"HELP: player.showPrompt": {
		"prefix": "helpplayer.showPrompt",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to display an input window. The callback executes after the player's response.",
			" * @param {string} text - The text to display on the input window.",
			" * @param {string} inputText - The text the player entered in the input window.",
			" */",
			"",
			"// Example usage",
			"let text = 'Please enter a password.';",
			"player.showPrompt(text, function (inputText) {",
			"\tswitch (inputText) {",
			"\t\tcase 'condition' :",
			"\t\t\t// do something...",
			"\t\t\tbreak;",
			"\t\tdefault :",
			"\t\t\t// do something...",
			"\t\t\tbreak;",
			"\t}",
			"});"
		]
	},
	"HELP: player.showConfirm": {
		"prefix": "helpplayer.showConfirm",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to display an confirm window. The callback executes when a player clicks 'OK'.",
			" * @param {string} text - The text to display on the confirm window.",
			" * @param {boolean} result - The response of the player. 'true' if the player clicks 'OK', and 'false' if the player clicks 'Cancel'.",
			" */",
			"",
			"// Example usage",
			"let text = 'A confirm message.';",
			"player.showConfirm(text, function (result) {",
			"\t// do something...",
			"});"
		]
	},
	"HELP: player.showAlert": {
		"prefix": "helpplayer.showAlert",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to display an alert window. The callback executes when a player clicks 'OK'.",
			" * @param {string} text - The text to display on the alert window.",
			" */",
			"",
			"// Example usage",
			"let text = 'An alert message.';",
			"player.showAlert(text, function () {",
			"\t// do something...",
			"});"
		]
	},
	"HELP: player.hideBuyAlert": {
		"prefix": "helpplayer.hideBuyAlert",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to close a purchase widget of the player.",
			" */",
			"",
			"// Example usage",
			"player.hideBuyAlert();"
		]
	},
	// ScriptPlayer - Methods / Data Load
	"HELP: player.isEmail": {
		"prefix": "helpplayer.isEmail",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to compare the player's email with the specified email.",
			" * @param {string} email - The email text that will be used for comparison.",
			" * @returns {boolean}",
			" */",
			"",
			"// Example usage",
			"let email = 'email@domain.com';",
			"let matchResult = player.isEmail(email);"
		]
	},
	"HELP: player.getLocationName": {
		"prefix": "helpplayer.getLocationName",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to get the location name of where the player is standing.",
			" * @returns {string}",
			" */",
			"",
			"// Example usage",
			"let locationName = player.getLocationName();"
		]
	},
	// ScriptPlayer - Methods / User Control
	"HELP: player.spawnAt": {
		"prefix": "helpplayer.spawnAt",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to move the player’s avatar to a specific coordinate, looking in the specified direction.",
			" * @param {number} tileX - The x coordinate of where the player will be moved to.",
			" * @param {number} tileY - The y coordinate of where the player will be moved to.",
			" * @param {number} [dir] - The direction the avatar will look at.",
			" * 1: WEST / 2: NORTH / 3: EAST / 4: SOUTH / 5: NORTH_WEST / 6: SOUTH_WEST / 7: NORTH_EAST / 8: SOUTH_EAST",
			" */",
			"",
			"// Example usage",
			"let tileX = 10;",
			"let tileY = 10;",
			"let dir = 4;",
			"player.spawnAt(tileX, tileY, dir);"
		]
	},
	"HELP: player.spawnAtLocation": {
		"prefix": "helpplayer.spawnAtLocation",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to move the player’s avatar to a specific location, looking in the specified direction.",
			" * NOTE: When there are multiple areas with the same name, the player will be moved to one of those locations randomly.",
			" * @param {string} locationName - The name of location where the player will be moved to.",
			" * @param {number} [dir] - The direction the avatar will be facing.",
			" * 1: WEST / 2: NORTH / 3: EAST / 4: SOUTH / 5: NORTH_WEST / 6: SOUTH_WEST / 7: NORTH_EAST / 8: SOUTH_EAST",
			" */",
			"",
			"// Example usage",
			"let locationName = 'myLocation';",
			"let dir = 4;",
			"player.spawnAtLocation(locationName, dir);"
		]
	},
	"HELP: player.spawnAtMap": {
		"prefix": "helpplayer.spawnAtMap",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to move the player to the specific 'map' of the specific 'space'.",
			" * @param {string} spaceHashID - The hash ID of the 'space' the player will be moved to.",
			" * @param {?string} [mapHashID] - The hash ID of the 'map' the player will be moved to.",
			" * If the value is not provided, the player will be moved to the 'entry map'.",
			" */",
			"",
			"// Example usage",
			"let spaceHashID = '65jeBA';",
			"let mapHashID = '2YvXMJ';",
			"player.spawnAtMap(spaceHashID, mapHashID)"
		]
	},
	// ScriptPlayer - Methods / Sound
	"HELP: player.playSound": {
		"prefix": "helpplayer.playSound",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to play a sound file to the player.",
			" * @param {string} filePath - The path of the file to be loaded.",
			" * @param {boolean} [loop=false] - A boolean flag indicating whether to play the file on repeat.",
			" * @param {boolean} [overlap=false] - A boolean flag indicating whether the sound can overlap with others.",
			" */",
			"",
			"// Example usage",
			"let filePath = 'sounds/mySound.mp3';",
			"let loop = false;",
			"let overlap = false;",
			"player.playSound(filePath, loop, overlap);"
		]
	},
	"HELP: player.playSoundLink": {
		"prefix": "helpplayer.playSoundLink",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to play a sound corresponding to the given URL to the player.",
			" * @param {string} fileURL - The URL of the sound file.",
			" * @param {boolean} [loop=false] - A boolean flag indicating whether to play the file on repeat.",
			" */",
			"",
			"// Example usage",
			"let fileURL = 'https://zep.us/assets/sounds/ring.mp3';",
			"let loop = false;",
			"player.playSoundLink(fileURL, loop);"
		]
	},
	// ScriptPlayer - Methods / Common
	"HELP: player.sendUpdated": {
		"prefix": "helpplayer.sendUpdated",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to apply the changes of field values pertaining to 'ScriptApp' or 'ScriptPlayer'.",
			" */",
			"",
			"// Example usage",
			"player.sendUpdated();"
		]
	},
	"HELP: player.save": {
		"prefix": "helpplayer.save",
		"body": [
			"/**",
			" * A method of ScriptPlayer, to apply any changes made to the 'player.storage'.",
			" */",
			"",
			"// Example usage",
			"player.save();"
		]
	}
}